image:
  registry: docker.io
  repository: bitnami/wordpress
  tag: 4.9.8
  pullPolicy: IfNotPresent
wordpressUsername: bdt-admin
wordpressPassword: ANNK4BS87S7GYU4F
wordpressEmail: lclotman@bdtrust.org
wordpressFirstName: Louis
wordpressLastName: Clotman
wordpressBlogName: User's Blog!
wordpressTablePrefix: wp_
allowEmptyPassword: false

## SMTP mail delivery configuration
## ref: https://github.com/bitnami/bitnami-docker-wordpress/#smtp-configuration
##
# smtpHost:
# smtpPort:
# smtpUser:
# smtpPassword:
# smtpUsername:
# smtpProtocol:

replicaCount: 1
# externalDatabase:
#   host: sqlproxy-gcloud-sqlproxy.default.svc.cluster.local
#   user: wp-client
#   password: "wisfi2-fufwAx-dekjyr"
#   database: bitnami_wordpress
#   port: 3306

mariadb:
  enabled: true
  replication:
    enabled: false
  db:
    name: bitnami_wordpress
    user: bn_wordpress
    password: 7FWRF457P395SDCPL29H56C8
  master:
    persistence:
      enabled: true
      accessMode: ReadWriteOnce
      size: 10Gi

## Kubernetes configuration
## For minikube, set this to NodePort, elsewhere use LoadBalancer or ClusterIP
##
serviceType: LoadBalancer
##
## serviceType: NodePort
## nodePorts:
##   http: <to set explicitly, choose port between 30000-32767>
##   https: <to set explicitly, choose port between 30000-32767>
nodePorts:
  http: ""
  https: ""
## Enable client source IP preservation
## ref http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
##
serviceExternalTrafficPolicy: Cluster

## Allow health checks to be pointed at the https port
healthcheckHttps: false

## Configure extra options for liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
livenessProbe:
  initialDelaySeconds: 120
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
readinessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

## Configure the ingress resource that allows you to access the
## Wordpress installation. Set up the URL
## ref: http://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  enabled: false

  ## The list of hostnames to be covered with this ingress record.
  ## Most likely this will be just one host, but in the event more hosts are needed, this is an array
  # jhosts:
  # - name: www-stage
  #   fqdn: www-stage.bdtrust.org

  #   ## Set this to true in order to enable TLS on the ingress record
  #   ## A side effect of this will be that the backend wordpress service will be connected at port 443
  #   tls: false

  #   ## Set this to true in order to add the corresponding annotations for cert-manager
  #   certManager: false

  #   ## If TLS is set to true, you must declare what secret will store the key/certificate for TLS
  #   tlsSecret: wordpress.local-tls

  #   ## Ingress annotations done as key:value pairs
  #   ## For a full list of possible ingress annotations, please see
  #   ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/annotations.md
  #   ##
  #   ## If tls is set to true, annotation ingress.kubernetes.io/secure-backends: "true" will automatically be set
  #   ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  #   annotations:
  #   #  kubernetes.io/ingress.class: nginx
  #     kubernetes.io/ingress.global-static-ip-name: "wp-ingress-static-ip"

  secrets:
  ## If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
  ##
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  # - name: wordpress.local-tls
  #   key:
  #   certificate:

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: true
  ## wordpress data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  ##
  ## If you want to reuse an existing claim, you can pass the name of the PVC using
  ## the existingClaim variable
  # existingClaim: staging-bdtrust
  accessMode: ReadWriteOnce
  size: 10Gi


service:
  type: LoadBalancer
  loadBalancerIP: 35.236.195.13
  port: 80
  httpsPort: 443
  ##
  ## nodePorts:
  ##   http: <to set explicitly, choose port between 30000-32767>
  ##   https: <to set explicitly, choose port between 30000-32767>
  nodePorts:
    http: ""
    https: ""
  ## Enable client source IP preservation
  ## ref http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Local

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  requests:
    memory: 512Mi
    cpu: 300m

## Node labels for pod assignment
## Ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Tolerations for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Pod annotations
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}
## Prometheus Exporter / Metrics
##
metrics:
  enabled: false
  # image:
  #   registry: docker.io
  #   repository: lusotycoon/apache-exporter
  #   tag: v0.5.0
  #   pullPolicy: IfNotPresent
  #   ## Optionally specify an array of imagePullSecrets.
  #   ## Secrets must be manually created in the namespace.
  #   ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  #   ##
  #   # pullSecrets:
  #   #   - myRegistrKeySecretName
  # ## Metrics exporter pod Annotation and Labels
  # podAnnotations:
  #   prometheus.io/scrape: "true"
  #   prometheus.io/port: "9117"
  #   ## Metrics exporter resource requests and limits
  #   ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  #   ##
  # # resources: {}
